#dependencies:
#  steps:
#  - dotnet environment setup
#  - build solution

name: 'Publish Project Package'
description: 'Will create a NuGet package if project has modifications and passes unit tests'
inputs:
  project:
    description: 'Project Assembly Name'
    required: true
  path-project:
    description: 'Project File Path'
    required: true
  path-tests-unit:
    description: 'Unit Tests Project File Path'
    required: false
  nuget-apikey:
    description: 'API Key for authenticating to Nuget'
    required: true
  # Environment Variables: don't get passed between jobs, so pass them manually
  env-commit-branch:
    description: 'Branch name of Commit'
    required: true
  env-commit-files:
    description: 'Modified Files in Commit (csv)'
    required: true
outputs:
  build-version:
    description: "Build Version"
    value: ${{ env.NUPKG }}
runs:
  using: "composite"
  steps:
  - id: exit-if-no-files
    name: Exit If Project Not Modified
    shell: bash
    run: |
      echo "Modified Files: ${{ inputs.env-commit-files }}"
      echo "Project Path: ${{ inputs.path-project }}"
      if [[ "${{ inputs.env-commit-files }}" != *"${{ inputs.path-project }}/"* ]]
      then
        echo 'Modified files (${{ inputs.env-commit-files }}) do not contain "${{ inputs.path-project }}"'
        exit 1
      fi
  
  - name: Run Unit Tests
    shell: bash
    run: |
      echo "Unit Test Path: ${{ inputs.path-tests-unit }}"
      if [ -n ${{ inputs.path-tests-unit }} ]
      then
        dotnet test "${{ inputs.path-tests-unit }}" --configuration Release --no-build
      fi
      
  - name: Create Package
    shell: bash
    run: |
      echo "Packaging: ${{ inputs.project }}"
      echo "Branch: ${{ inputs.env-commit-branch }}"
      logs=$(dotnet pack "${{ inputs.path-project }}" --configuration Release --no-build --output .nupkgs /p:Branch=${{ env.BRANCH }})
      echo $logs
      echo "NUPKG=$(temp=${logs#*Successfully created package \'}; temp=${temp%\'*}; echo $temp)" >> $GITHUB_ENV
        
  - name: Publish Package
    shell: bash
    run: |
      echo "Publishing: $NUPKG"
      dotnet nuget push "$NUPKG" --source https://api.nuget.org/v3/index.json --api-key ${{ inputs.nuget-apikey }}
